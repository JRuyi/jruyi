/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

archivesBaseName = 'jruyi-api'
version = jruyi_api_version
description = 'An API lib for compiling when developing JRuyi based application'

ext {
	title = 'JRuyi API'
}

dependencies {
	compile "org.osgi:org.osgi.core:$org_osgi_core_version"
}

processResources {
	expand([
			org_jruyi_cmd_version         : '1.0',
			org_jruyi_common_version      : '1.3',
			org_jruyi_io_version          : '1.2',
			org_jruyi_me_version          : '1.1',
			org_jruyi_system_version      : '1.0',
			org_jruyi_timeoutadmin_version: '1.0',
			org_jruyi_workshop_version    : '1.1',
	])
}

javadoc {
	title = "${project.title} $version"
	options {
		encoding = 'UTF-8'
		bottom = "Copyright &copy; ${Calendar.instance.get(Calendar.YEAR)} " +
				"<a href=\"$organizationUrl\">$organizationName</a>. " +
				"All rights reserved."
	}

	exclude 'org/jruyi/system/main/**'
	exclude '**/internal/**'
}

jar {
	from sourceSets.main.output
	exclude('**/internal/**')

	manifest {
		attributes(
				'Specification-Title': title,
				'Specification-Version': version,
				'Specification-Vendor': organizationName,
				'Specification-Vendor-Id': organizationId,
				'Implementation-Title': title,
				'Implementation-Version': version,
				'Implementation-Vendor': organizationName,
				'Created-By': createdBy,
		)
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}
