/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

archivesBaseName = 'jruyi-api'
version = jruyi_api_version
description = 'An API lib for compiling when developing JRuyi based application'

ext {
	title = 'JRuyi API'
}

dependencies {
	compile "org.osgi:org.osgi.core:$org_osgi_core_version"
}

processResources {
	expand([
			org_jruyi_cmd_version         : parsePackageVersion(org_jruyi_cmd_version),
			org_jruyi_common_version      : parsePackageVersion(org_jruyi_common_version),
			org_jruyi_io_version          : parsePackageVersion(org_jruyi_io_version),
			org_jruyi_me_version          : parsePackageVersion(org_jruyi_me_version),
			org_jruyi_timeoutadmin_version: parsePackageVersion(org_jruyi_timeoutadmin_version),
			org_jruyi_workshop_version    : parsePackageVersion(org_jruyi_workshop_version),
			org_jruyi_system_version      : '1.4',
	])
}

javadoc {
	title = "${project.title} $version"
	options {
		encoding = 'UTF-8'
		bottom = "Copyright &copy; ${Calendar.instance.get(Calendar.YEAR)} " +
				"<a href=\"$organizationUrl\">$organizationName</a>. " +
				"All rights reserved."
	}

	exclude 'org/jruyi/system/main/**'
	exclude '**/internal/**'
}

jar {
	from sourceSets.main.output
	exclude('**/internal/**')

	manifest {
		attributes(
				'Specification-Title': title,
				'Specification-Version': version,
				'Specification-Vendor': organizationName,
				'Specification-Vendor-Id': organizationId,
				'Implementation-Title': title,
				'Implementation-Version': version,
				'Implementation-Vendor': organizationName,
				'Created-By': createdBy,
		)
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

publishing {
	publications {
		mavenJava(MavenPublication) {

			artifactId archivesBaseName

			from components.java

			pom.withXml {
				def projectNode = asNode()
				projectNode.appendNode('name', title)
				projectNode.appendNode('description', description)
				projectNode.appendNode('url', organizationUrl)

				def organizationNode = projectNode.appendNode('organization')
				organizationNode.appendNode('name', organizationName)
				organizationNode.appendNode('url', organizationUrl)

				def licenseNode = projectNode.appendNode('licenses').appendNode('license')
				licenseNode.appendNode('name', licenseName)
				licenseNode.appendNode('url', licenseUrl)
				licenseNode.appendNode('distribution', 'repo')

				projectNode.dependencies.'*'.findAll() {
					it.scope.text() == 'runtime'
				}.each() {
					it.scope*.value = 'provided'
				}
			}

			artifact sourcesJar
			artifact javadocJar
		}
	}
}

bintray {
	pkg {
		name = archivesBaseName
		desc = description
		version {
			name = project.version
		}
	}
}

def parsePackageVersion(def version) {
	final String v = String.valueOf(version);
	int i = v.indexOf((int) '.');
	i = v.indexOf((int) '.', i + 1);
	return v.substring(0, i);
}